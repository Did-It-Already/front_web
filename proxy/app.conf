upstream front_web_node {
    server host.docker.internal:5173;
}

server {
    listen 2512 ssl;
    server_name yourdomain.com;

    ssl_certificate /etc/nginx/ssl/certificate.crt;  # Path to your SSL certificate
    ssl_certificate_key /etc/nginx/ssl/privateKey.key;  # Path to your SSL private key

    # SSL settings for security (you can adjust these as needed)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    proxy_buffers 64 16k;
    proxy_max_temp_file_size 1024m;
    proxy_connect_timeout 5s;
    proxy_send_timeout 10s;
    proxy_read_timeout 10s;
    
    location ~* ^.+\.(rb|log)$ {
        deny all;
    }
    # serve static (compiled) assets directly if they exist (for node production)
    location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/ {
        try_files $uri @front_web_node;
        access_log off;
        gzip_static on; # to serve pre-gzipped version
        expires max;
        add_header Cache-Control public;
        # Some browsers still send conditional-GET requests if there's a
        # Last-Modified header or an ETag header even if they haven't
        # reached the expiry date sent in the Expires header.
        add_header Last-Modified "";
        add_header ETag "";
        break;
    }
    location / {
        try_files $uri $uri/ @front_web_node;
    }
    location @front_web_node {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://front_web_node;
        access_log /var/www/front-web/log/nginx.access.log;
        error_log /var/www/front-web/log/nginx.error.log;
    }
}